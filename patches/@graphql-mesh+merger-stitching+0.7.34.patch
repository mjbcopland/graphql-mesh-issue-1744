diff --git a/node_modules/@graphql-mesh/merger-stitching/index.cjs.js b/node_modules/@graphql-mesh/merger-stitching/index.cjs.js
index 6d04f42..fd3235b 100644
--- a/node_modules/@graphql-mesh/merger-stitching/index.cjs.js
+++ b/node_modules/@graphql-mesh/merger-stitching/index.cjs.js
@@ -2,66 +2,9 @@
 
 const stitch = require('@graphql-tools/stitch');
 const wrap = require('@graphql-tools/wrap');
-const graphql = require('graphql');
-const schema = require('@graphql-tools/schema');
 const utils = require('@graphql-mesh/utils');
 
-const mergeSingleSchema = ({ rawSources, typeDefs, resolvers, transforms }) => {
-    if (rawSources.length !== 1) {
-        throw new Error('This merger supports only one schema');
-    }
-    const [source] = rawSources;
-    let schema$1 = source.schema;
-    let wrapTransforms = [];
-    let noWrapTransforms = [];
-    if (transforms === null || transforms === void 0 ? void 0 : transforms.length) {
-        const transformGroups = utils.groupTransforms(transforms);
-        wrapTransforms = transformGroups.wrapTransforms;
-        noWrapTransforms = transformGroups.noWrapTransforms;
-    }
-    if (source.executor || source.subscriber || source.transforms.length) {
-        const firstRoundTransforms = [...source.transforms];
-        if (!typeDefs && !resolvers) {
-            firstRoundTransforms.push(...wrapTransforms, ...noWrapTransforms);
-        }
-        schema$1 = wrap.wrapSchema({
-            ...source,
-            schema: schema$1,
-            transforms: firstRoundTransforms,
-        });
-    }
-    if (typeDefs || resolvers) {
-        typeDefs === null || typeDefs === void 0 ? void 0 : typeDefs.forEach(typeDef => {
-            schema$1 = graphql.extendSchema(schema$1, typeDef);
-        });
-        if (resolvers) {
-            schema$1 = schema.addResolversToSchema({
-                schema: schema$1,
-                resolvers,
-                updateResolversInPlace: true,
-            });
-        }
-        if (wrapTransforms.length) {
-            schema$1 = wrap.wrapSchema({
-                schema: schema$1,
-                transforms: [...wrapTransforms, ...noWrapTransforms],
-            });
-        }
-        else if (noWrapTransforms.length) {
-            schema$1 = utils.applySchemaTransforms(schema$1, undefined, schema$1, noWrapTransforms);
-        }
-    }
-    schema$1.extensions = schema$1.extensions || {};
-    Object.defineProperty(schema$1.extensions, 'sourceMap', {
-        get: () => new Map([[source, schema$1]]),
-    });
-    return schema$1;
-};
-
 const mergeUsingStitching = async function (options) {
-    if (options.rawSources.length === 1) {
-        return mergeSingleSchema(options);
-    }
     const { rawSources, typeDefs, resolvers, transforms } = options;
     let unifiedSchema = stitch.stitchSchemas({
         subschemas: rawSources,
diff --git a/node_modules/@graphql-mesh/merger-stitching/index.cjs.js.map b/node_modules/@graphql-mesh/merger-stitching/index.cjs.js.map
index 0a3c165..834da32 100644
--- a/node_modules/@graphql-mesh/merger-stitching/index.cjs.js.map
+++ b/node_modules/@graphql-mesh/merger-stitching/index.cjs.js.map
@@ -1 +1 @@
-{"version":3,"file":"index.cjs.js","sources":["../../../dist/mergers/stitching/src/mergeSingleSchema.js","../../../dist/mergers/stitching/src/index.js"],"sourcesContent":["import { extendSchema } from 'graphql';\nimport { wrapSchema } from '@graphql-tools/wrap';\nimport { addResolversToSchema } from '@graphql-tools/schema';\nimport { groupTransforms, applySchemaTransforms } from '@graphql-mesh/utils';\nexport const mergeSingleSchema = ({ rawSources, typeDefs, resolvers, transforms }) => {\n    if (rawSources.length !== 1) {\n        throw new Error('This merger supports only one schema');\n    }\n    const [source] = rawSources;\n    let schema = source.schema;\n    let wrapTransforms = [];\n    let noWrapTransforms = [];\n    if (transforms === null || transforms === void 0 ? void 0 : transforms.length) {\n        const transformGroups = groupTransforms(transforms);\n        wrapTransforms = transformGroups.wrapTransforms;\n        noWrapTransforms = transformGroups.noWrapTransforms;\n    }\n    if (source.executor || source.subscriber || source.transforms.length) {\n        const firstRoundTransforms = [...source.transforms];\n        if (!typeDefs && !resolvers) {\n            firstRoundTransforms.push(...wrapTransforms, ...noWrapTransforms);\n        }\n        schema = wrapSchema({\n            ...source,\n            schema,\n            transforms: firstRoundTransforms,\n        });\n    }\n    if (typeDefs || resolvers) {\n        typeDefs === null || typeDefs === void 0 ? void 0 : typeDefs.forEach(typeDef => {\n            schema = extendSchema(schema, typeDef);\n        });\n        if (resolvers) {\n            schema = addResolversToSchema({\n                schema,\n                resolvers,\n                updateResolversInPlace: true,\n            });\n        }\n        if (wrapTransforms.length) {\n            schema = wrapSchema({\n                schema,\n                transforms: [...wrapTransforms, ...noWrapTransforms],\n            });\n        }\n        else if (noWrapTransforms.length) {\n            schema = applySchemaTransforms(schema, undefined, schema, noWrapTransforms);\n        }\n    }\n    schema.extensions = schema.extensions || {};\n    Object.defineProperty(schema.extensions, 'sourceMap', {\n        get: () => new Map([[source, schema]]),\n    });\n    return schema;\n};\n//# sourceMappingURL=mergeSingleSchema.js.map","import { stitchSchemas } from '@graphql-tools/stitch';\nimport { wrapSchema } from '@graphql-tools/wrap';\nimport { mergeSingleSchema } from './mergeSingleSchema';\nimport { groupTransforms, applySchemaTransforms } from '@graphql-mesh/utils';\nconst mergeUsingStitching = async function (options) {\n    if (options.rawSources.length === 1) {\n        return mergeSingleSchema(options);\n    }\n    const { rawSources, typeDefs, resolvers, transforms } = options;\n    let unifiedSchema = stitchSchemas({\n        subschemas: rawSources,\n        typeDefs,\n        resolvers,\n    });\n    unifiedSchema.extensions = unifiedSchema.extensions || {};\n    Object.defineProperty(unifiedSchema.extensions, 'sourceMap', {\n        get: () => {\n            const stitchingInfo = unifiedSchema.extensions.stitchingInfo;\n            const entries = stitchingInfo.subschemaMap.entries();\n            return new Map([...entries].map(([subschemaConfig, subschema]) => [subschemaConfig, subschema.transformedSchema]));\n        },\n    });\n    if (transforms === null || transforms === void 0 ? void 0 : transforms.length) {\n        const { noWrapTransforms, wrapTransforms } = groupTransforms(transforms);\n        if (wrapTransforms.length) {\n            unifiedSchema = wrapSchema({\n                schema: unifiedSchema,\n                batch: true,\n                transforms: wrapTransforms,\n            });\n        }\n        if (noWrapTransforms.length) {\n            unifiedSchema = applySchemaTransforms(unifiedSchema, { schema: unifiedSchema }, null, noWrapTransforms);\n        }\n    }\n    return unifiedSchema;\n};\nexport default mergeUsingStitching;\n//# sourceMappingURL=index.js.map"],"names":["schema","groupTransforms","wrapSchema","extendSchema","addResolversToSchema","applySchemaTransforms","stitchSchemas"],"mappings":";;;;;;;;AAIO,MAAM,iBAAiB,GAAG,CAAC,EAAE,UAAU,EAAE,QAAQ,EAAE,SAAS,EAAE,UAAU,EAAE,KAAK;AACtF,IAAI,IAAI,UAAU,CAAC,MAAM,KAAK,CAAC,EAAE;AACjC,QAAQ,MAAM,IAAI,KAAK,CAAC,sCAAsC,CAAC,CAAC;AAChE,KAAK;AACL,IAAI,MAAM,CAAC,MAAM,CAAC,GAAG,UAAU,CAAC;AAChC,IAAI,IAAIA,QAAM,GAAG,MAAM,CAAC,MAAM,CAAC;AAC/B,IAAI,IAAI,cAAc,GAAG,EAAE,CAAC;AAC5B,IAAI,IAAI,gBAAgB,GAAG,EAAE,CAAC;AAC9B,IAAI,IAAI,UAAU,KAAK,IAAI,IAAI,UAAU,KAAK,KAAK,CAAC,GAAG,KAAK,CAAC,GAAG,UAAU,CAAC,MAAM,EAAE;AACnF,QAAQ,MAAM,eAAe,GAAGC,qBAAe,CAAC,UAAU,CAAC,CAAC;AAC5D,QAAQ,cAAc,GAAG,eAAe,CAAC,cAAc,CAAC;AACxD,QAAQ,gBAAgB,GAAG,eAAe,CAAC,gBAAgB,CAAC;AAC5D,KAAK;AACL,IAAI,IAAI,MAAM,CAAC,QAAQ,IAAI,MAAM,CAAC,UAAU,IAAI,MAAM,CAAC,UAAU,CAAC,MAAM,EAAE;AAC1E,QAAQ,MAAM,oBAAoB,GAAG,CAAC,GAAG,MAAM,CAAC,UAAU,CAAC,CAAC;AAC5D,QAAQ,IAAI,CAAC,QAAQ,IAAI,CAAC,SAAS,EAAE;AACrC,YAAY,oBAAoB,CAAC,IAAI,CAAC,GAAG,cAAc,EAAE,GAAG,gBAAgB,CAAC,CAAC;AAC9E,SAAS;AACT,QAAQD,QAAM,GAAGE,eAAU,CAAC;AAC5B,YAAY,GAAG,MAAM;AACrB,oBAAYF,QAAM;AAClB,YAAY,UAAU,EAAE,oBAAoB;AAC5C,SAAS,CAAC,CAAC;AACX,KAAK;AACL,IAAI,IAAI,QAAQ,IAAI,SAAS,EAAE;AAC/B,QAAQ,QAAQ,KAAK,IAAI,IAAI,QAAQ,KAAK,KAAK,CAAC,GAAG,KAAK,CAAC,GAAG,QAAQ,CAAC,OAAO,CAAC,OAAO,IAAI;AACxF,YAAYA,QAAM,GAAGG,oBAAY,CAACH,QAAM,EAAE,OAAO,CAAC,CAAC;AACnD,SAAS,CAAC,CAAC;AACX,QAAQ,IAAI,SAAS,EAAE;AACvB,YAAYA,QAAM,GAAGI,2BAAoB,CAAC;AAC1C,wBAAgBJ,QAAM;AACtB,gBAAgB,SAAS;AACzB,gBAAgB,sBAAsB,EAAE,IAAI;AAC5C,aAAa,CAAC,CAAC;AACf,SAAS;AACT,QAAQ,IAAI,cAAc,CAAC,MAAM,EAAE;AACnC,YAAYA,QAAM,GAAGE,eAAU,CAAC;AAChC,wBAAgBF,QAAM;AACtB,gBAAgB,UAAU,EAAE,CAAC,GAAG,cAAc,EAAE,GAAG,gBAAgB,CAAC;AACpE,aAAa,CAAC,CAAC;AACf,SAAS;AACT,aAAa,IAAI,gBAAgB,CAAC,MAAM,EAAE;AAC1C,YAAYA,QAAM,GAAGK,2BAAqB,CAACL,QAAM,EAAE,SAAS,EAAEA,QAAM,EAAE,gBAAgB,CAAC,CAAC;AACxF,SAAS;AACT,KAAK;AACL,IAAIA,QAAM,CAAC,UAAU,GAAGA,QAAM,CAAC,UAAU,IAAI,EAAE,CAAC;AAChD,IAAI,MAAM,CAAC,cAAc,CAACA,QAAM,CAAC,UAAU,EAAE,WAAW,EAAE;AAC1D,QAAQ,GAAG,EAAE,MAAM,IAAI,GAAG,CAAC,CAAC,CAAC,MAAM,EAAEA,QAAM,CAAC,CAAC,CAAC;AAC9C,KAAK,CAAC,CAAC;AACP,IAAI,OAAOA,QAAM,CAAC;AAClB,CAAC;;AClDD,MAAM,mBAAmB,GAAG,gBAAgB,OAAO,EAAE;AACrD,IAAI,IAAI,OAAO,CAAC,UAAU,CAAC,MAAM,KAAK,CAAC,EAAE;AACzC,QAAQ,OAAO,iBAAiB,CAAC,OAAO,CAAC,CAAC;AAC1C,KAAK;AACL,IAAI,MAAM,EAAE,UAAU,EAAE,QAAQ,EAAE,SAAS,EAAE,UAAU,EAAE,GAAG,OAAO,CAAC;AACpE,IAAI,IAAI,aAAa,GAAGM,oBAAa,CAAC;AACtC,QAAQ,UAAU,EAAE,UAAU;AAC9B,QAAQ,QAAQ;AAChB,QAAQ,SAAS;AACjB,KAAK,CAAC,CAAC;AACP,IAAI,aAAa,CAAC,UAAU,GAAG,aAAa,CAAC,UAAU,IAAI,EAAE,CAAC;AAC9D,IAAI,MAAM,CAAC,cAAc,CAAC,aAAa,CAAC,UAAU,EAAE,WAAW,EAAE;AACjE,QAAQ,GAAG,EAAE,MAAM;AACnB,YAAY,MAAM,aAAa,GAAG,aAAa,CAAC,UAAU,CAAC,aAAa,CAAC;AACzE,YAAY,MAAM,OAAO,GAAG,aAAa,CAAC,YAAY,CAAC,OAAO,EAAE,CAAC;AACjE,YAAY,OAAO,IAAI,GAAG,CAAC,CAAC,GAAG,OAAO,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC,eAAe,EAAE,SAAS,CAAC,KAAK,CAAC,eAAe,EAAE,SAAS,CAAC,iBAAiB,CAAC,CAAC,CAAC,CAAC;AAC/H,SAAS;AACT,KAAK,CAAC,CAAC;AACP,IAAI,IAAI,UAAU,KAAK,IAAI,IAAI,UAAU,KAAK,KAAK,CAAC,GAAG,KAAK,CAAC,GAAG,UAAU,CAAC,MAAM,EAAE;AACnF,QAAQ,MAAM,EAAE,gBAAgB,EAAE,cAAc,EAAE,GAAGL,qBAAe,CAAC,UAAU,CAAC,CAAC;AACjF,QAAQ,IAAI,cAAc,CAAC,MAAM,EAAE;AACnC,YAAY,aAAa,GAAGC,eAAU,CAAC;AACvC,gBAAgB,MAAM,EAAE,aAAa;AACrC,gBAAgB,KAAK,EAAE,IAAI;AAC3B,gBAAgB,UAAU,EAAE,cAAc;AAC1C,aAAa,CAAC,CAAC;AACf,SAAS;AACT,QAAQ,IAAI,gBAAgB,CAAC,MAAM,EAAE;AACrC,YAAY,aAAa,GAAGG,2BAAqB,CAAC,aAAa,EAAE,EAAE,MAAM,EAAE,aAAa,EAAE,EAAE,IAAI,EAAE,gBAAgB,CAAC,CAAC;AACpH,SAAS;AACT,KAAK;AACL,IAAI,OAAO,aAAa,CAAC;AACzB,CAAC;;;;"}
\ No newline at end of file
+{"version":3,"file":"index.cjs.js","sources":["../../../dist/mergers/stitching/src/index.js"],"sourcesContent":["import { stitchSchemas } from '@graphql-tools/stitch';\nimport { wrapSchema } from '@graphql-tools/wrap';\nimport { groupTransforms, applySchemaTransforms } from '@graphql-mesh/utils';\nconst mergeUsingStitching = async function (options) {\n    const { rawSources, typeDefs, resolvers, transforms } = options;\n    let unifiedSchema = stitchSchemas({\n        subschemas: rawSources,\n        typeDefs,\n        resolvers,\n    });\n    unifiedSchema.extensions = unifiedSchema.extensions || {};\n    Object.defineProperty(unifiedSchema.extensions, 'sourceMap', {\n        get: () => {\n            const stitchingInfo = unifiedSchema.extensions.stitchingInfo;\n            const entries = stitchingInfo.subschemaMap.entries();\n            return new Map([...entries].map(([subschemaConfig, subschema]) => [subschemaConfig, subschema.transformedSchema]));\n        },\n    });\n    if (transforms === null || transforms === void 0 ? void 0 : transforms.length) {\n        const { noWrapTransforms, wrapTransforms } = groupTransforms(transforms);\n        if (wrapTransforms.length) {\n            unifiedSchema = wrapSchema({\n                schema: unifiedSchema,\n                batch: true,\n                transforms: wrapTransforms,\n            });\n        }\n        if (noWrapTransforms.length) {\n            unifiedSchema = applySchemaTransforms(unifiedSchema, { schema: unifiedSchema }, null, noWrapTransforms);\n        }\n    }\n    return unifiedSchema;\n};\nexport default mergeUsingStitching;\n//# sourceMappingURL=index.js.map"],"names":["stitchSchemas","groupTransforms","wrapSchema","applySchemaTransforms"],"mappings":";;;;;;AAGA,MAAM,mBAAmB,GAAG,gBAAgB,OAAO,EAAE;AACrD,IAAI,MAAM,EAAE,UAAU,EAAE,QAAQ,EAAE,SAAS,EAAE,UAAU,EAAE,GAAG,OAAO,CAAC;AACpE,IAAI,IAAI,aAAa,GAAGA,oBAAa,CAAC;AACtC,QAAQ,UAAU,EAAE,UAAU;AAC9B,QAAQ,QAAQ;AAChB,QAAQ,SAAS;AACjB,KAAK,CAAC,CAAC;AACP,IAAI,aAAa,CAAC,UAAU,GAAG,aAAa,CAAC,UAAU,IAAI,EAAE,CAAC;AAC9D,IAAI,MAAM,CAAC,cAAc,CAAC,aAAa,CAAC,UAAU,EAAE,WAAW,EAAE;AACjE,QAAQ,GAAG,EAAE,MAAM;AACnB,YAAY,MAAM,aAAa,GAAG,aAAa,CAAC,UAAU,CAAC,aAAa,CAAC;AACzE,YAAY,MAAM,OAAO,GAAG,aAAa,CAAC,YAAY,CAAC,OAAO,EAAE,CAAC;AACjE,YAAY,OAAO,IAAI,GAAG,CAAC,CAAC,GAAG,OAAO,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC,eAAe,EAAE,SAAS,CAAC,KAAK,CAAC,eAAe,EAAE,SAAS,CAAC,iBAAiB,CAAC,CAAC,CAAC,CAAC;AAC/H,SAAS;AACT,KAAK,CAAC,CAAC;AACP,IAAI,IAAI,UAAU,KAAK,IAAI,IAAI,UAAU,KAAK,KAAK,CAAC,GAAG,KAAK,CAAC,GAAG,UAAU,CAAC,MAAM,EAAE;AACnF,QAAQ,MAAM,EAAE,gBAAgB,EAAE,cAAc,EAAE,GAAGC,qBAAe,CAAC,UAAU,CAAC,CAAC;AACjF,QAAQ,IAAI,cAAc,CAAC,MAAM,EAAE;AACnC,YAAY,aAAa,GAAGC,eAAU,CAAC;AACvC,gBAAgB,MAAM,EAAE,aAAa;AACrC,gBAAgB,KAAK,EAAE,IAAI;AAC3B,gBAAgB,UAAU,EAAE,cAAc;AAC1C,aAAa,CAAC,CAAC;AACf,SAAS;AACT,QAAQ,IAAI,gBAAgB,CAAC,MAAM,EAAE;AACrC,YAAY,aAAa,GAAGC,2BAAqB,CAAC,aAAa,EAAE,EAAE,MAAM,EAAE,aAAa,EAAE,EAAE,IAAI,EAAE,gBAAgB,CAAC,CAAC;AACpH,SAAS;AACT,KAAK;AACL,IAAI,OAAO,aAAa,CAAC;AACzB,CAAC;;;;"}
\ No newline at end of file
diff --git a/node_modules/@graphql-mesh/merger-stitching/index.esm.js b/node_modules/@graphql-mesh/merger-stitching/index.esm.js
index 146672a..8144a0e 100644
--- a/node_modules/@graphql-mesh/merger-stitching/index.esm.js
+++ b/node_modules/@graphql-mesh/merger-stitching/index.esm.js
@@ -1,65 +1,8 @@
 import { stitchSchemas } from '@graphql-tools/stitch';
 import { wrapSchema } from '@graphql-tools/wrap';
-import { extendSchema } from 'graphql';
-import { addResolversToSchema } from '@graphql-tools/schema';
 import { groupTransforms, applySchemaTransforms } from '@graphql-mesh/utils';
 
-const mergeSingleSchema = ({ rawSources, typeDefs, resolvers, transforms }) => {
-    if (rawSources.length !== 1) {
-        throw new Error('This merger supports only one schema');
-    }
-    const [source] = rawSources;
-    let schema = source.schema;
-    let wrapTransforms = [];
-    let noWrapTransforms = [];
-    if (transforms === null || transforms === void 0 ? void 0 : transforms.length) {
-        const transformGroups = groupTransforms(transforms);
-        wrapTransforms = transformGroups.wrapTransforms;
-        noWrapTransforms = transformGroups.noWrapTransforms;
-    }
-    if (source.executor || source.subscriber || source.transforms.length) {
-        const firstRoundTransforms = [...source.transforms];
-        if (!typeDefs && !resolvers) {
-            firstRoundTransforms.push(...wrapTransforms, ...noWrapTransforms);
-        }
-        schema = wrapSchema({
-            ...source,
-            schema,
-            transforms: firstRoundTransforms,
-        });
-    }
-    if (typeDefs || resolvers) {
-        typeDefs === null || typeDefs === void 0 ? void 0 : typeDefs.forEach(typeDef => {
-            schema = extendSchema(schema, typeDef);
-        });
-        if (resolvers) {
-            schema = addResolversToSchema({
-                schema,
-                resolvers,
-                updateResolversInPlace: true,
-            });
-        }
-        if (wrapTransforms.length) {
-            schema = wrapSchema({
-                schema,
-                transforms: [...wrapTransforms, ...noWrapTransforms],
-            });
-        }
-        else if (noWrapTransforms.length) {
-            schema = applySchemaTransforms(schema, undefined, schema, noWrapTransforms);
-        }
-    }
-    schema.extensions = schema.extensions || {};
-    Object.defineProperty(schema.extensions, 'sourceMap', {
-        get: () => new Map([[source, schema]]),
-    });
-    return schema;
-};
-
 const mergeUsingStitching = async function (options) {
-    if (options.rawSources.length === 1) {
-        return mergeSingleSchema(options);
-    }
     const { rawSources, typeDefs, resolvers, transforms } = options;
     let unifiedSchema = stitchSchemas({
         subschemas: rawSources,
diff --git a/node_modules/@graphql-mesh/merger-stitching/index.esm.js.map b/node_modules/@graphql-mesh/merger-stitching/index.esm.js.map
index e4f4a2c..0475e19 100644
--- a/node_modules/@graphql-mesh/merger-stitching/index.esm.js.map
+++ b/node_modules/@graphql-mesh/merger-stitching/index.esm.js.map
@@ -1 +1 @@
-{"version":3,"file":"index.esm.js","sources":["../../../dist/mergers/stitching/src/mergeSingleSchema.js","../../../dist/mergers/stitching/src/index.js"],"sourcesContent":["import { extendSchema } from 'graphql';\nimport { wrapSchema } from '@graphql-tools/wrap';\nimport { addResolversToSchema } from '@graphql-tools/schema';\nimport { groupTransforms, applySchemaTransforms } from '@graphql-mesh/utils';\nexport const mergeSingleSchema = ({ rawSources, typeDefs, resolvers, transforms }) => {\n    if (rawSources.length !== 1) {\n        throw new Error('This merger supports only one schema');\n    }\n    const [source] = rawSources;\n    let schema = source.schema;\n    let wrapTransforms = [];\n    let noWrapTransforms = [];\n    if (transforms === null || transforms === void 0 ? void 0 : transforms.length) {\n        const transformGroups = groupTransforms(transforms);\n        wrapTransforms = transformGroups.wrapTransforms;\n        noWrapTransforms = transformGroups.noWrapTransforms;\n    }\n    if (source.executor || source.subscriber || source.transforms.length) {\n        const firstRoundTransforms = [...source.transforms];\n        if (!typeDefs && !resolvers) {\n            firstRoundTransforms.push(...wrapTransforms, ...noWrapTransforms);\n        }\n        schema = wrapSchema({\n            ...source,\n            schema,\n            transforms: firstRoundTransforms,\n        });\n    }\n    if (typeDefs || resolvers) {\n        typeDefs === null || typeDefs === void 0 ? void 0 : typeDefs.forEach(typeDef => {\n            schema = extendSchema(schema, typeDef);\n        });\n        if (resolvers) {\n            schema = addResolversToSchema({\n                schema,\n                resolvers,\n                updateResolversInPlace: true,\n            });\n        }\n        if (wrapTransforms.length) {\n            schema = wrapSchema({\n                schema,\n                transforms: [...wrapTransforms, ...noWrapTransforms],\n            });\n        }\n        else if (noWrapTransforms.length) {\n            schema = applySchemaTransforms(schema, undefined, schema, noWrapTransforms);\n        }\n    }\n    schema.extensions = schema.extensions || {};\n    Object.defineProperty(schema.extensions, 'sourceMap', {\n        get: () => new Map([[source, schema]]),\n    });\n    return schema;\n};\n//# sourceMappingURL=mergeSingleSchema.js.map","import { stitchSchemas } from '@graphql-tools/stitch';\nimport { wrapSchema } from '@graphql-tools/wrap';\nimport { mergeSingleSchema } from './mergeSingleSchema';\nimport { groupTransforms, applySchemaTransforms } from '@graphql-mesh/utils';\nconst mergeUsingStitching = async function (options) {\n    if (options.rawSources.length === 1) {\n        return mergeSingleSchema(options);\n    }\n    const { rawSources, typeDefs, resolvers, transforms } = options;\n    let unifiedSchema = stitchSchemas({\n        subschemas: rawSources,\n        typeDefs,\n        resolvers,\n    });\n    unifiedSchema.extensions = unifiedSchema.extensions || {};\n    Object.defineProperty(unifiedSchema.extensions, 'sourceMap', {\n        get: () => {\n            const stitchingInfo = unifiedSchema.extensions.stitchingInfo;\n            const entries = stitchingInfo.subschemaMap.entries();\n            return new Map([...entries].map(([subschemaConfig, subschema]) => [subschemaConfig, subschema.transformedSchema]));\n        },\n    });\n    if (transforms === null || transforms === void 0 ? void 0 : transforms.length) {\n        const { noWrapTransforms, wrapTransforms } = groupTransforms(transforms);\n        if (wrapTransforms.length) {\n            unifiedSchema = wrapSchema({\n                schema: unifiedSchema,\n                batch: true,\n                transforms: wrapTransforms,\n            });\n        }\n        if (noWrapTransforms.length) {\n            unifiedSchema = applySchemaTransforms(unifiedSchema, { schema: unifiedSchema }, null, noWrapTransforms);\n        }\n    }\n    return unifiedSchema;\n};\nexport default mergeUsingStitching;\n//# sourceMappingURL=index.js.map"],"names":[],"mappings":"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"}
\ No newline at end of file
+{"version":3,"file":"index.esm.js","sources":["../../../dist/mergers/stitching/src/index.js"],"sourcesContent":["import { stitchSchemas } from '@graphql-tools/stitch';\nimport { wrapSchema } from '@graphql-tools/wrap';\nimport { groupTransforms, applySchemaTransforms } from '@graphql-mesh/utils';\nconst mergeUsingStitching = async function (options) {\n    const { rawSources, typeDefs, resolvers, transforms } = options;\n    let unifiedSchema = stitchSchemas({\n        subschemas: rawSources,\n        typeDefs,\n        resolvers,\n    });\n    unifiedSchema.extensions = unifiedSchema.extensions || {};\n    Object.defineProperty(unifiedSchema.extensions, 'sourceMap', {\n        get: () => {\n            const stitchingInfo = unifiedSchema.extensions.stitchingInfo;\n            const entries = stitchingInfo.subschemaMap.entries();\n            return new Map([...entries].map(([subschemaConfig, subschema]) => [subschemaConfig, subschema.transformedSchema]));\n        },\n    });\n    if (transforms === null || transforms === void 0 ? void 0 : transforms.length) {\n        const { noWrapTransforms, wrapTransforms } = groupTransforms(transforms);\n        if (wrapTransforms.length) {\n            unifiedSchema = wrapSchema({\n                schema: unifiedSchema,\n                batch: true,\n                transforms: wrapTransforms,\n            });\n        }\n        if (noWrapTransforms.length) {\n            unifiedSchema = applySchemaTransforms(unifiedSchema, { schema: unifiedSchema }, null, noWrapTransforms);\n        }\n    }\n    return unifiedSchema;\n};\nexport default mergeUsingStitching;\n//# sourceMappingURL=index.js.map"],"names":[],"mappings":";;;;AAGA,MAAM,mBAAmB,GAAG,gBAAgB,OAAO,EAAE;AACrD,IAAI,MAAM,EAAE,UAAU,EAAE,QAAQ,EAAE,SAAS,EAAE,UAAU,EAAE,GAAG,OAAO,CAAC;AACpE,IAAI,IAAI,aAAa,GAAG,aAAa,CAAC;AACtC,QAAQ,UAAU,EAAE,UAAU;AAC9B,QAAQ,QAAQ;AAChB,QAAQ,SAAS;AACjB,KAAK,CAAC,CAAC;AACP,IAAI,aAAa,CAAC,UAAU,GAAG,aAAa,CAAC,UAAU,IAAI,EAAE,CAAC;AAC9D,IAAI,MAAM,CAAC,cAAc,CAAC,aAAa,CAAC,UAAU,EAAE,WAAW,EAAE;AACjE,QAAQ,GAAG,EAAE,MAAM;AACnB,YAAY,MAAM,aAAa,GAAG,aAAa,CAAC,UAAU,CAAC,aAAa,CAAC;AACzE,YAAY,MAAM,OAAO,GAAG,aAAa,CAAC,YAAY,CAAC,OAAO,EAAE,CAAC;AACjE,YAAY,OAAO,IAAI,GAAG,CAAC,CAAC,GAAG,OAAO,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC,eAAe,EAAE,SAAS,CAAC,KAAK,CAAC,eAAe,EAAE,SAAS,CAAC,iBAAiB,CAAC,CAAC,CAAC,CAAC;AAC/H,SAAS;AACT,KAAK,CAAC,CAAC;AACP,IAAI,IAAI,UAAU,KAAK,IAAI,IAAI,UAAU,KAAK,KAAK,CAAC,GAAG,KAAK,CAAC,GAAG,UAAU,CAAC,MAAM,EAAE;AACnF,QAAQ,MAAM,EAAE,gBAAgB,EAAE,cAAc,EAAE,GAAG,eAAe,CAAC,UAAU,CAAC,CAAC;AACjF,QAAQ,IAAI,cAAc,CAAC,MAAM,EAAE;AACnC,YAAY,aAAa,GAAG,UAAU,CAAC;AACvC,gBAAgB,MAAM,EAAE,aAAa;AACrC,gBAAgB,KAAK,EAAE,IAAI;AAC3B,gBAAgB,UAAU,EAAE,cAAc;AAC1C,aAAa,CAAC,CAAC;AACf,SAAS;AACT,QAAQ,IAAI,gBAAgB,CAAC,MAAM,EAAE;AACrC,YAAY,aAAa,GAAG,qBAAqB,CAAC,aAAa,EAAE,EAAE,MAAM,EAAE,aAAa,EAAE,EAAE,IAAI,EAAE,gBAAgB,CAAC,CAAC;AACpH,SAAS;AACT,KAAK;AACL,IAAI,OAAO,aAAa,CAAC;AACzB,CAAC;;;;"}
\ No newline at end of file
